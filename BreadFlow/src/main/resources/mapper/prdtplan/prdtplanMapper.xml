<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.breadflow.app.prdtplan.mapper.PrdtplanMapper">
	
	<!-- 생산계획 단건 조회(관련 진행상태는 묶어서 최소값만 보여줌) -->
	<select id="selectPrdtplan" parameterType="String">
		SELECT  p.production_plan_no
		        , p.start_date
		        , p.last_date
		        , p.delivery_location
		        ,  (SELECT  company_name
		            FROM    company
		            WHERE   company_no = p.delivery_location) AS delivery_location_nm
		        , p.production_company
		        ,  (SELECT  company_name
		            FROM    company
		            WHERE   company_no = p.production_company) AS production_company_nm
		        , 'c' || MIN(TO_NUMBER(SUBSTR(d.progress_situation, 2))) AS progress_situation
		FROM    production_plan p JOIN production_plan_detail d
		                ON p.production_plan_no = d.production_plan_no
		WHERE   p.production_plan_no = #{productionPlanNo}
		GROUP BY p.production_plan_no, p.start_date, p.last_date, p.delivery_location, p.production_company
	</select>
	
	
	<select id="selectPrdtplanDetailList" parameterType="PrdtplanVO">
		SELECT  production_detail_no
		        , d.product_code
		        , ( SELECT  product_name
		            FROM    product
		            WHERE   product_code = d.product_code) AS product_name
		        , d.plan_quantity
		        , d.unit
		        , d.other
		FROM    production_plan_detail d

		WHERE   production_plan_no = #{productionPlanNo}
	</select>
	
	<!-- 생산계획(production_plan)단건입력 -->
	<insert id="insertPrdtplan" parameterType="PrdtplanVO">
		<selectKey resultType="string" keyProperty="productionPlanNo" order="BEFORE">
			SELECT 'SP' || PLANSEQ('production_plan','production_plan_no') FROM dual
		</selectKey>
	
		INSERT INTO production_plan
		(
			production_plan_no
			, start_date
			, last_date
			, delivery_location
			, production_company
			, writer
		) VALUES (
			#{productionPlanNo}
			, #{startDate}
			, #{lastDate}
			, #{deliveryLocation}
			, #{productionCompany}
			, #{writer}
		)
	</insert>
	
	<!-- 생산계획 상세(production_plan_detail) 단건 여러개 입력 -->
	<insert id="insertPrdtplanDetail" parameterType="PrdtplanVO">
		<selectKey resultType="string" keyProperty="productionDetailNo" order="BEFORE">
		    SELECT  'SP' || PLANSEQ('production_plan_detail','production_detail_no') AS production_detail_no
			FROM    dual
	    </selectKey>
	    
	    INSERT INTO production_plan_detail
	    (
	    	production_detail_no
	    	, product_code
	    	, plan_quantity
	    	, unit
	    	, other
	    	, progress_situation
	    	, production_plan_no
	    ) VALUES (
	    	#{productionDetailNo}
	    	, #{productCode}
	    	, #{planQuantity}
	    	, #{unit}
	    	, #{other}
	    	, 'c1'
	    	, #{productionPlanNo}
	    )
    
	</insert>
	
	<!-- 전체 조회 -->
	<!-- 두 테이블 조인할 때 디테일 테이블은 한개의 행만 나오도록 첫번째 행만 뽑아 출력 -->
	<select id="selectPrdtplanList" resultType="PrdtplanVO">
	SELECT 	*
	FROM 	production_plan p
	JOIN (
	    SELECT d.production_plan_no, d.production_detail_no, d.product_code, d.plan_quantity, d.unit, d.other, d.progress_situation
	    FROM (
	        SELECT d.*, ROW_NUMBER() OVER (PARTITION BY d.production_plan_no ORDER BY d.production_detail_no ASC) AS rn
	        FROM production_plan_detail d
	    ) d
	    WHERE d.rn = 1
	) d
	ON p.production_plan_no = d.production_plan_no
	</select>
	

	<!-- 제품 모달 조회 -->
	<select id="selectPrdtList" resultType="PrdtplanVO">
	SELECT  major
	        , sub
	        , product_code
	        , product_name
	        , FIND_CD(unit) AS unit
	FROM product
	</select>
	
	
	<!-- 생산관리 디테일 특정 id의 progress-situation 갱신 ('미확인') -->
	<update id="updatedetailForProgress" parameterType="PrdtplanVO">
		UPDATE  production_plan_detail
		SET     progress_situation = 'c3'
		WHERE   production_plan_no = #{productionPlanNo}
	</update>
	
	

	<!-- ==== 생산관리(제조공장) 페이지에서 사용되는 매퍼 ==== -->
	<!--  -->
	<select id="selectPrdtplanListForCom" parameterType="String" resultType="PrdtplanVO">
		SELECT 	*
		FROM 	production_plan p
			JOIN (
			    SELECT d.production_plan_no, d.production_detail_no, d.product_code, d.plan_quantity, d.unit, d.other, d.progress_situation
			    FROM (
			        SELECT d.*, ROW_NUMBER() OVER (PARTITION BY d.production_plan_no ORDER BY d.production_detail_no ASC) AS rn
			        FROM production_plan_detail d
			    ) d
			    WHERE d.rn = 1
			) d
			ON p.production_plan_no = d.production_plan_no
		WHERE production_company = #{companyNo}
		  AND progress_situation != 'c1'
	</select>
	
	<update id="updateDetailForProgressToC4" parameterType="PrdtplanVO">
		UPDATE  production_plan_detail
		SET     progress_situation = 'c4'
		WHERE   production_plan_no = #{productionPlanNo}
	</update>
	
	<update id="updateDetailForProgressToC5" parameterType="PrdtplanVO">
		UPDATE  production_plan_detail
		SET     progress_situation = 'c5'
		WHERE   production_plan_no = #{productionPlanNo}
	</update>
	
	<!-- 생산계획 상세(production_plan_detail) 단건 여러개 입력 -->
	<insert id="insertPrdtplanDetailsForSelf" parameterType="PrdtplanVO">
		<selectKey resultType="string" keyProperty="productionDetailNo" order="BEFORE">
		    SELECT  'SP' || PLANSEQ('production_plan_detail','production_detail_no') AS production_detail_no
			FROM    dual
	    </selectKey>
	    
	    INSERT INTO production_plan_detail
	    (
	    	production_detail_no
	    	, product_code
	    	, plan_quantity
	    	, unit
	    	, other
	    	, progress_situation
	    	, production_plan_no
	    ) VALUES (
	    	#{productionDetailNo}
	    	, #{productCode}
	    	, #{planQuantity}
	    	, #{unit}
	    	, #{other}
	    	, 'c2'
	    	, #{productionPlanNo}
	    )
    
	</insert>


	<insert id="insertInstoreForPrdtplan" parameterType="prdtplanVO">
		INSERT INTO INSTORE
		(
			instore_no
            , instore_date
            , item_div
            , item_code
            , instore_quantity
            , company_no
            , stock_quantity
            , facilities_div_no
            , lot_no
            , instore_manager
            , ordering_detail_code
            , instore_div
            , expiration_deadline
            , instore_group_no		
		) VALUES (
			('IN' || (SELECT GETSEQ('instore','instore_no') FROM dual))
            , #{lastDate}
            , 'g2'
            , #{productCode}
            , #{planQuantity}
            , #{productionCompany}
            , (SELECT NVL(SUM(i.instore_quantity),0) + #{planQuantity} FROM instore i left join company c on i.company_no = c.company_no WHERE i.company_no = #{productionCompany})
            , 'a3'
            , (SUBSTR(#{productCode}, 1, 2) || (SELECT GETSEQ('instore','lot_no') FROM dual))
            , #{writer}
            , #{productionPlanNo}
            , 'f2'
            , (	SELECT #{lastDate} + (SELECT expiration_deadline
                    				FROM product
                    				WHERE product_code = #{productCode})
				FROM production_plan
				WHERE production_plan_no = #{productionPlanNo})
            , (SELECT MAX(INSTORE_GROUP_NO) + 1 FROM instore)
		)
	</insert>

</mapper>









