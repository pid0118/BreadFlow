<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.breadflow.app.ordering.mapper.OrderingMapper">
	<select id="selectOrderingList" resultType="OrderingVO">
		SELECT b.*
		FROM (SELECT rownum rn, a.*
		     FROM (SELECT ordering_code , ordering_date , ordering_request_manager , total_price , approval_whether , orderform_no , delivery_desire_date 
				   FROM ordering 
				   WHERE  approval_whether IN (
				   <foreach collection="status" item="item" separator=",">
				   		#{item}
				   </foreach>
				   )
				   ORDER BY
					<choose>
						<when test="sort == 'odDesc'">
							ordering_date DESC
						</when>
						<when test="sort == 'odAsc'">
							ordering_date ASC
						</when>
						<when test="sort == 'deDesc'">
							delivery_desire_date DESC
						</when>
						<when test="sort == 'deAsc'">
							delivery_desire_date ASC
						</when>
						<otherwise>
							ordering_code
						</otherwise>
					</choose>) a
			  ) b
		WHERE b.rn BETWEEN (#{page}-1) * 10 + 1 AND (#{page}-1) * 10 + 10
	</select>
	
	<select id="selectOrderingPage">
		SELECT count(b.rn)
		FROM (SELECT rownum rn, a.*
		     FROM (SELECT ordering_code , ordering_date , ordering_request_manager , total_price , approval_whether , orderform_no , delivery_desire_date 
				   FROM ordering 
				   WHERE  approval_whether IN (
				   <foreach collection="status" item="item" separator=",">
				   		#{item}
				   </foreach>
				   )
				   ORDER BY
					<choose>
						<when test="sort == 'odDesc'">
							ordering_date DESC
						</when>
						<when test="sort == 'odAsc'">
							ordering_date ASC
						</when>
						<when test="sort == 'deDesc'">
							delivery_desire_date DESC
						</when>
						<when test="sort == 'deAsc'">
							delivery_desire_date ASC
						</when>
						<otherwise>
							ordering_code
						</otherwise>
					</choose>) a
			  ) b
	</select>
	
	<insert id="insertOrdering">
		<selectKey resultType="string" keyProperty="orderformNo" order="BEFORE">
			SELECT 'BW'|| GETSEQ('ordering', 'orderform_no')
			FROM dual
		</selectKey>
		INSERT INTO ordering (ordering_code, ordering_date, ordering_request_manager, total_price, approval_whether, orderform_no, delivery_desire_date, company_no)
		VALUES (#{code}, sysdate, #{orderingVO.orderingRequestManager}, #{orderingVO.totalPrice}, 'd3', #{orderformNo}, #{orderingVO.deliveryDesireDate}, #{orderingVO.companyNo})
	</insert>
	
	<insert id="insertOrderingDetail">
		<selectKey resultType="string" keyProperty="detailcode" order="BEFORE">
			SELECT 'BC'|| GETSEQ('ordering_detail', 'ordering_detail_code') 
			FROM dual
		</selectKey>
		INSERT INTO ordering_detail (ordering_detail_code
								, quantity
								, ordering_ingredient
								, ordering_product
								, ordering_code)
		VALUES(#{detailcode}
			   , #{orderingDetailVO.quantity}
			   , #{orderingDetailVO.orderingIngredient}
			   , #{orderingDetailVO.orderingProduct}
			   , #{code})
	</insert>
	
	<select id="selectOrderingCode">
		SELECT 'BC'|| GETSEQ('ordering', 'ordering_code')
		FROM dual
	</select>
	
	<update id="updateOrderingApprovalCancel" statementType="CALLABLE">
		CALL ordercancel_prod(#{no}, #{reason}, #{result, mode = OUT, jdbcType=VARCHAR})
	</update>
	
	<update id="updateOrderingAccept" statementType="CALLABLE">
		CALL orderaccept_prod(#{orderingCode}, #{result, mode = OUT, jdbcType=VARCHAR})
	</update>
	
	<select id="selectOrderingDetailList">
		SELECT od.ordering_detail_code ordering_detail_code
		       , od.quantity quantity
		       , NVL(p.product_name, i.ingredient_name) itemname
		       , NVL(p.amount, i.amount) || FIND_CD(NVL(p.unit, i.unit)) unit
		       , NVL(p.standard, i.standard) standard
		       , NVL(p.purchase_price, i.purchase_price) * od.quantity price
		FROM ordering_detail od 
		LEFT JOIN ingredient i 
		ON od.ordering_ingredient = i.ingredient_code
		LEFT JOIN product p 
		ON od.ordering_product = p.product_code
		WHERE ordering_code = #{orderingCode}
	</select>
</mapper>