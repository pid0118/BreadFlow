<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.breadflow.app.mtrqplan.mapper.MtrqplanMapper">

<!-- 모달창에 쓰일 재료(ingredient) 전체 조회 -->
<select id="selectIngrdntList" parameterType="MtrqplanVO">
	SELECT  major
	        , sub
	        , ingredient_code
	        , ingredient_name
	        , FIND_CD(unit) AS unit_name
	        , unit
	FROM 	ingredient
	ORDER BY ingredient_code
</select>


<select id="selectMtrqplan" parameterType="String">
	SELECT  m.matrequired_plan_no
	        , m.supply_company
	        , ( SELECT  company_name
	            FROM    company
	            WHERE   company_no = m.supply_company) AS supply_company_nm
	        , m.start_date
	        , m.delivery_location
	        , ( SELECT  company_name
	            FROM    company
	            WHERE   company_no = m.delivery_location) AS delivery_location_nm
	        , m.last_date
	        , MIN(d.progress_situation) AS progress_situation
	FROM matrequired_plan m JOIN matrequired_plan_detail d
	                          ON m.matrequired_plan_no = d.matrequired_plan_no
	WHERE m.production_plan_no = #{productionPlanNo}        
	GROUP BY m.matrequired_plan_no
	        , m.supply_company
	        , m.start_date
	        , m.delivery_location
	        , m.last_date
</select>



<select id="selectMtrqplanDetails" parameterType="String">
	SELECT  product_code
	        , ( SELECT  ingredient_name
	            FROM    ingredient
	            WHERE   ingredient_code = product_code) AS product_name
	        , plan_quantity
	        , FIND_CD(unit) AS unit
	        , other
	FROM    matrequired_plan_detail
	WHERE   matrequired_plan_no = #{matrequiredPlanNo}
</select>


<insert id="insertMtrqplan" parameterType="MtrqplanVO">
	<selectKey resultType="string" keyProperty="matrequiredPlanNo" order="BEFORE">
		SELECT 'JP' || PLANSEQ('MATREQUIRED_PLAN','MATREQUIRED_PLAN_NO') FROM dual
	</selectKey>
	INSERT INTO matrequired_plan
	(
	    matrequired_plan_no
	    , production_plan_no
	    , start_date
	    , last_date
	    , delivery_location
	    , supply_company
	    , writer
	) VALUES (
	    #{matrequiredPlanNo}
	    , #{productionPlanNo}
	    , #{startDate}
	    , #{lastDate}
	    , #{deliveryLocation}
	    , #{supplyCompany}
	    , #{writer}
	)
</insert>


<insert id="insertMtrqplanDetail" parameterType="MtrqplanVO">
	<selectKey resultType="string" keyProperty="materialDetailNo" order="BEFORE">
		SELECT 'JP' || PLANSEQ('matrequired_plan_DETAIL', 'material_detail_no') FROM dual
	</selectKey>
	INSERT INTO matrequired_plan_detail
	(
	    product_code
	    , plan_quantity
	    , unit
	    , other
	    , progress_situation
	    , material_detail_no
	    , matrequired_plan_no
	) VALUES (
	    #{productCode}
	    , #{planQuantity}
	    , #{unit}
	    , #{other}
	    , 'c1'
	    , #{materialDetailNo}
	    , #{matrequiredPlanNo}
	)
</insert>

<update id="updateMtrqplanDetailForProgress" parameterType="MtrqplanVO">
	UPDATE  matrequired_plan_detail
	SET     progress_situation = 'c3'
	WHERE   matrequired_plan_no = #{matrequiredPlanNo}
</update>


<!--  ======= 자재소요계획(공급업체) 페이지에서 사용되는 매퍼들 ========= -->
<!-- 부모 테이블에서 쓰이는 자재소요계획 전체 조회 -->
<select id="selectMtrqplanForCom" parameterType="String" resultType="MtrqplanVO">
	SELECT
	    matrequired_plan_no
	    , ( SELECT  ingredient_name
	        FROM    ingredient
	        WHERE   ingredient_code = product_code) AS product_code
	    , plan_quantity
	    , FIND_CD(progress_situation) AS progress_situation
	    , last_date
	    , other
	FROM (
	    SELECT m.matrequired_plan_no,
	           d.product_code,
	           d.plan_quantity,
	           d.progress_situation,
	           m.last_date,
	           d.other,
	           ROW_NUMBER() OVER (PARTITION BY m.matrequired_plan_no ORDER BY d.product_code) AS rn
	    FROM matrequired_plan m
	    JOIN matrequired_plan_detail d
	        ON m.matrequired_plan_no = d.matrequired_plan_no
	    WHERE m.supply_company = #{supplyCompany}
	      AND d.progress_situation != 'c1'
	) subquery
	WHERE subquery.rn = 1
	ORDER BY subquery.matrequired_plan_no
</select>

<!-- 좌측아래 form에 쓰이는 자재소요계획 단건 조회 -->
<select id="selectMtrqplanForForm" parameterType="String" resultType="MtrqplanVO">
	SELECT  matrequired_plan_no
	        , start_date
	        , last_date
	        , ( SELECT  company_name
	            FROM    company
	            WHERE   company_no = delivery_location) AS delivery_location_nm
	        , delivery_location
	        , ( SELECT  MIN(progress_situation)
	            FROM    matrequired_plan_detail
	            WHERE   matrequired_plan_no = #{matrequiredPlanNo}
	            GROUP BY matrequired_plan_no) AS progress_situation
	FROM    matrequired_plan
	WHERE   matrequired_plan_no = #{matrequiredPlanNo}
</select>

<!-- 자식 테이블에서 쓰이는 자재소요계획 디테일 단건 조회 -->
<select id="selectMtrqplanDetailForGrid" parameterType="String" resultType="MtrqplanVO">
	SELECT  product_code
	        , ( SELECT  ingredient_name
	            FROM    ingredient
	            WHERE   ingredient_code = product_code ) AS product_name
	        , plan_quantity
	        , FIND_CD(unit) AS unit
	        , other
	        , material_detail_no
	FROM    matrequired_plan_detail
	WHERE   matrequired_plan_no = #{matrequiredPlanNo}
</select>

<update id="updateMtrqDetailForProgressToC4" parameterType="MtrqplanVO">
	UPDATE  matrequired_plan_detail
	SET     progress_situation = 'c4'
	WHERE   matrequired_plan_no = #{matrequiredPlanNo}
</update>

<update id="updateMatqDetailForProgressToC5" parameterType="MtrqplanVO">
	UPDATE  matrequired_plan_detail
	SET     progress_situation = 'c5'
	WHERE   matrequired_plan_no = #{matrequiredPlanNo}
</update>

<insert id="insertInstoreForMtrqplan" parameterType="MtrqplanVO">
	INSERT INTO INSTORE
		(
			instore_no
            , instore_date
            , item_div
            , item_code
            , instore_quantity
            , company_no
            , stock_quantity
            , facilities_div_no
            , lot_no
            , instore_manager
            , ordering_detail_code
            , instore_div
            , expiration_deadline
            , instore_group_no		
		) VALUES (
			('IN' || (SELECT GETSEQ('instore','instore_no') FROM dual))
            , #{lastDate}
            , 'g1'
            , #{productCode}
            , #{planQuantity}
            , #{supplyCompany}
            , (((SELECT  (NVL(SUM(i.instore_quantity), 0))
                         FROM    instore i LEFT JOIN ordering_detail od ON i.ordering_detail_code = od.ordering_detail_code
                                           LEFT JOIN orders_detail ods ON od.ordering_detail_code = ods.ordering_detail_code
                         WHERE   ods.instore_company = #{supplyCompany} AND i.item_code = #{productCode}) - 
                        (SELECT  (NVL(SUM(o.outstore_quantity), 0))
                         FROM    outstore o LEFT JOIN orders_detail ods ON o.orders_detail_no = ods.orders_detail_no
                         WHERE   ods.outstore_company = #{supplyCompany} AND ods.orders_item = #{productCode})) + #{planQuantity})
            , 'a2'
            , (SUBSTR(#{productCode}, 1, 2) || (SELECT GETSEQ('instore','lot_no') FROM dual))
            , #{writer}
            , #{materialDetailNo}
            , 'f2'
            , (	SELECT #{lastDate} + (SELECT expiration_deadline
                    				FROM ingredient
                    				WHERE ingredient_code = #{productCode})
				FROM matrequired_plan
				WHERE matrequired_plan_no = #{matrequiredPlanNo})
            , #{instoreGroupNo}
		)
</insert>



<select id="selectBom" parameterType="String">
    WITH bo AS (   
     SELECT
            b.ingredient_code,
            SUM(b.consumption) AS consumption 
     FROM production_plan_detail p
     JOIN bom b ON p.product_code = b.product_code
     WHERE production_plan_no = #{productionPlanNo}
     GROUP BY b.ingredient_code)
  SELECT     i.ingredient_code AS  product_code
	        ,  i.ingredient_name  AS product_name
	        , consumption AS plan_quantity
	        , FIND_CD(i.unit) AS unit
	        , '' other 
 FROM ingredient i JOIN bo
                    ON bo.ingredient_code = i.ingredient_code  
</select>

<select id="selectPrdtplanLists" resultType="MtrqplanVO">
	SELECT DISTINCT p.production_plan_no
	        , ( SELECT product_name
	            FROM product
	            WHERE product_code = d.product_code ) AS product_code
	        , d.plan_quantity
	        , ( SELECT company_name
	            FROM company
	            WHERE company_no = p.production_company ) AS production_company
	        , FIND_CD(d.progress_situation) AS progress_situation
	        , p.start_date
	        , p.last_date
	        , d.other
	        ,CASE  WHEN mp.production_plan_no IS NULL THEN 'n'
                ELSE 'y'
                END AS is_contain_prdt
	FROM 	production_plan p
	JOIN (
	    SELECT d.production_plan_no, d.production_detail_no, d.product_code, d.plan_quantity, d.unit, d.other, d.progress_situation
	    FROM (
	        SELECT d.*, ROW_NUMBER() OVER (PARTITION BY d.production_plan_no ORDER BY d.production_detail_no ASC) AS rn
	        FROM production_plan_detail d
	    ) d
	    WHERE d.rn = 1
	) d
	ON p.production_plan_no = d.production_plan_no
    LEFT OUTER JOIN matrequired_plan mp
            ON d.production_plan_no = mp.production_plan_no
    WHERE d.progress_situation = 'c1'
    ORDER BY p.production_plan_no DESC
</select>

</mapper>